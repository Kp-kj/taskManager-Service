// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: task.proto

package task

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Task_CreateCuratorialTask_FullMethodName    = "/task.Task/CreateCuratorialTask"
	Task_QueryTaskList_FullMethodName           = "/task.Task/QueryTaskList"
	Task_QueryTaskDetails_FullMethodName        = "/task.Task/QueryTaskDetails"
	Task_QueryUserLaunchTaskList_FullMethodName = "/task.Task/QueryUserLaunchTaskList"
	Task_CreateLabel_FullMethodName             = "/task.Task/CreateLabel"
	Task_DeleteLabel_FullMethodName             = "/task.Task/DeleteLabel"
	Task_QueryLabelList_FullMethodName          = "/task.Task/QueryLabelList"
)

// TaskClient is the client API for Task service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskClient interface {
	CreateCuratorialTask(ctx context.Context, in *CreatePublishTaskInput, opts ...grpc.CallOption) (*Mistake, error)
	QueryTaskList(ctx context.Context, in *PublishTaskInput, opts ...grpc.CallOption) (*RePublishTask, error)
	QueryTaskDetails(ctx context.Context, in *TaskDetailsInput, opts ...grpc.CallOption) (*ReTaskDetails, error)
	QueryUserLaunchTaskList(ctx context.Context, in *UserLaunchTaskListInput, opts ...grpc.CallOption) (*RePublishTask, error)
	CreateLabel(ctx context.Context, in *CreateLabelInput, opts ...grpc.CallOption) (*Mistake, error)
	DeleteLabel(ctx context.Context, in *DeleteLabelInput, opts ...grpc.CallOption) (*Mistake, error)
	QueryLabelList(ctx context.Context, in *LabelListInput, opts ...grpc.CallOption) (*ReLabelList, error)
}

type taskClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskClient(cc grpc.ClientConnInterface) TaskClient {
	return &taskClient{cc}
}

func (c *taskClient) CreateCuratorialTask(ctx context.Context, in *CreatePublishTaskInput, opts ...grpc.CallOption) (*Mistake, error) {
	out := new(Mistake)
	err := c.cc.Invoke(ctx, Task_CreateCuratorialTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) QueryTaskList(ctx context.Context, in *PublishTaskInput, opts ...grpc.CallOption) (*RePublishTask, error) {
	out := new(RePublishTask)
	err := c.cc.Invoke(ctx, Task_QueryTaskList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) QueryTaskDetails(ctx context.Context, in *TaskDetailsInput, opts ...grpc.CallOption) (*ReTaskDetails, error) {
	out := new(ReTaskDetails)
	err := c.cc.Invoke(ctx, Task_QueryTaskDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) QueryUserLaunchTaskList(ctx context.Context, in *UserLaunchTaskListInput, opts ...grpc.CallOption) (*RePublishTask, error) {
	out := new(RePublishTask)
	err := c.cc.Invoke(ctx, Task_QueryUserLaunchTaskList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) CreateLabel(ctx context.Context, in *CreateLabelInput, opts ...grpc.CallOption) (*Mistake, error) {
	out := new(Mistake)
	err := c.cc.Invoke(ctx, Task_CreateLabel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) DeleteLabel(ctx context.Context, in *DeleteLabelInput, opts ...grpc.CallOption) (*Mistake, error) {
	out := new(Mistake)
	err := c.cc.Invoke(ctx, Task_DeleteLabel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) QueryLabelList(ctx context.Context, in *LabelListInput, opts ...grpc.CallOption) (*ReLabelList, error) {
	out := new(ReLabelList)
	err := c.cc.Invoke(ctx, Task_QueryLabelList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskServer is the server API for Task service.
// All implementations must embed UnimplementedTaskServer
// for forward compatibility
type TaskServer interface {
	CreateCuratorialTask(context.Context, *CreatePublishTaskInput) (*Mistake, error)
	QueryTaskList(context.Context, *PublishTaskInput) (*RePublishTask, error)
	QueryTaskDetails(context.Context, *TaskDetailsInput) (*ReTaskDetails, error)
	QueryUserLaunchTaskList(context.Context, *UserLaunchTaskListInput) (*RePublishTask, error)
	CreateLabel(context.Context, *CreateLabelInput) (*Mistake, error)
	DeleteLabel(context.Context, *DeleteLabelInput) (*Mistake, error)
	QueryLabelList(context.Context, *LabelListInput) (*ReLabelList, error)
	mustEmbedUnimplementedTaskServer()
}

// UnimplementedTaskServer must be embedded to have forward compatible implementations.
type UnimplementedTaskServer struct {
}

func (UnimplementedTaskServer) CreateCuratorialTask(context.Context, *CreatePublishTaskInput) (*Mistake, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCuratorialTask not implemented")
}
func (UnimplementedTaskServer) QueryTaskList(context.Context, *PublishTaskInput) (*RePublishTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTaskList not implemented")
}
func (UnimplementedTaskServer) QueryTaskDetails(context.Context, *TaskDetailsInput) (*ReTaskDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTaskDetails not implemented")
}
func (UnimplementedTaskServer) QueryUserLaunchTaskList(context.Context, *UserLaunchTaskListInput) (*RePublishTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryUserLaunchTaskList not implemented")
}
func (UnimplementedTaskServer) CreateLabel(context.Context, *CreateLabelInput) (*Mistake, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLabel not implemented")
}
func (UnimplementedTaskServer) DeleteLabel(context.Context, *DeleteLabelInput) (*Mistake, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLabel not implemented")
}
func (UnimplementedTaskServer) QueryLabelList(context.Context, *LabelListInput) (*ReLabelList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryLabelList not implemented")
}
func (UnimplementedTaskServer) mustEmbedUnimplementedTaskServer() {}

// UnsafeTaskServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskServer will
// result in compilation errors.
type UnsafeTaskServer interface {
	mustEmbedUnimplementedTaskServer()
}

func RegisterTaskServer(s grpc.ServiceRegistrar, srv TaskServer) {
	s.RegisterService(&Task_ServiceDesc, srv)
}

func _Task_CreateCuratorialTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePublishTaskInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).CreateCuratorialTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Task_CreateCuratorialTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).CreateCuratorialTask(ctx, req.(*CreatePublishTaskInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_QueryTaskList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishTaskInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).QueryTaskList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Task_QueryTaskList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).QueryTaskList(ctx, req.(*PublishTaskInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_QueryTaskDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskDetailsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).QueryTaskDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Task_QueryTaskDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).QueryTaskDetails(ctx, req.(*TaskDetailsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_QueryUserLaunchTaskList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLaunchTaskListInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).QueryUserLaunchTaskList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Task_QueryUserLaunchTaskList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).QueryUserLaunchTaskList(ctx, req.(*UserLaunchTaskListInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_CreateLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLabelInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).CreateLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Task_CreateLabel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).CreateLabel(ctx, req.(*CreateLabelInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_DeleteLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLabelInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).DeleteLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Task_DeleteLabel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).DeleteLabel(ctx, req.(*DeleteLabelInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_QueryLabelList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LabelListInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).QueryLabelList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Task_QueryLabelList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).QueryLabelList(ctx, req.(*LabelListInput))
	}
	return interceptor(ctx, in, info, handler)
}

// Task_ServiceDesc is the grpc.ServiceDesc for Task service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Task_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "task.Task",
	HandlerType: (*TaskServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCuratorialTask",
			Handler:    _Task_CreateCuratorialTask_Handler,
		},
		{
			MethodName: "QueryTaskList",
			Handler:    _Task_QueryTaskList_Handler,
		},
		{
			MethodName: "QueryTaskDetails",
			Handler:    _Task_QueryTaskDetails_Handler,
		},
		{
			MethodName: "QueryUserLaunchTaskList",
			Handler:    _Task_QueryUserLaunchTaskList_Handler,
		},
		{
			MethodName: "CreateLabel",
			Handler:    _Task_CreateLabel_Handler,
		},
		{
			MethodName: "DeleteLabel",
			Handler:    _Task_DeleteLabel_Handler,
		},
		{
			MethodName: "QueryLabelList",
			Handler:    _Task_QueryLabelList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "task.proto",
}
