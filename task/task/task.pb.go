// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.19.4
// source: task.proto

package task

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// CreatePublishTaskInput 策展任务信息接收表
type CreatePublishTaskInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Creator      string     `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`           // 创建者
	TweetAddress string     `protobuf:"bytes,2,opt,name=tweetAddress,proto3" json:"tweetAddress,omitempty"` // 推特文章地址
	Label        []string   `protobuf:"bytes,3,rep,name=label,proto3" json:"label,omitempty"`               // 标签
	AwardBudget  float64    `protobuf:"fixed64,4,opt,name=awardBudget,proto3" json:"awardBudget,omitempty"` // 奖励预算
	MaxUser      int64      `protobuf:"zigzag64,5,opt,name=maxUser,proto3" json:"maxUser,omitempty"`        // 最大奖励用户数
	AwardAmount  float64    `protobuf:"fixed64,6,opt,name=awardAmount,proto3" json:"awardAmount,omitempty"` // 奖励金额
	TaskBak      []*TaskBak `protobuf:"bytes,7,rep,name=taskBak,proto3" json:"taskBak,omitempty"`           // 任务要求
}

func (x *CreatePublishTaskInput) Reset() {
	*x = CreatePublishTaskInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePublishTaskInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePublishTaskInput) ProtoMessage() {}

func (x *CreatePublishTaskInput) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePublishTaskInput.ProtoReflect.Descriptor instead.
func (*CreatePublishTaskInput) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{0}
}

func (x *CreatePublishTaskInput) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *CreatePublishTaskInput) GetTweetAddress() string {
	if x != nil {
		return x.TweetAddress
	}
	return ""
}

func (x *CreatePublishTaskInput) GetLabel() []string {
	if x != nil {
		return x.Label
	}
	return nil
}

func (x *CreatePublishTaskInput) GetAwardBudget() float64 {
	if x != nil {
		return x.AwardBudget
	}
	return 0
}

func (x *CreatePublishTaskInput) GetMaxUser() int64 {
	if x != nil {
		return x.MaxUser
	}
	return 0
}

func (x *CreatePublishTaskInput) GetAwardAmount() float64 {
	if x != nil {
		return x.AwardAmount
	}
	return 0
}

func (x *CreatePublishTaskInput) GetTaskBak() []*TaskBak {
	if x != nil {
		return x.TaskBak
	}
	return nil
}

type TaskBak struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId     uint64 `protobuf:"varint,1,opt,name=taskId,proto3" json:"taskId,omitempty"`        // 任务ID
	TaskName   int32  `protobuf:"varint,2,opt,name=taskName,proto3" json:"taskName,omitempty"`    // 任务名称,1-转推，2-引用，3-回复,4-喜欢,5-关注
	TaskDemand string `protobuf:"bytes,3,opt,name=taskDemand,proto3" json:"taskDemand,omitempty"` // 任务要求
	Article    string `protobuf:"bytes,4,opt,name=article,proto3" json:"article,omitempty"`       // 任务文案
}

func (x *TaskBak) Reset() {
	*x = TaskBak{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskBak) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskBak) ProtoMessage() {}

func (x *TaskBak) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskBak.ProtoReflect.Descriptor instead.
func (*TaskBak) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{1}
}

func (x *TaskBak) GetTaskId() uint64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *TaskBak) GetTaskName() int32 {
	if x != nil {
		return x.TaskName
	}
	return 0
}

func (x *TaskBak) GetTaskDemand() string {
	if x != nil {
		return x.TaskDemand
	}
	return ""
}

func (x *TaskBak) GetArticle() string {
	if x != nil {
		return x.Article
	}
	return ""
}

type Mistake struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err string `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
}

func (x *Mistake) Reset() {
	*x = Mistake{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mistake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mistake) ProtoMessage() {}

func (x *Mistake) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mistake.ProtoReflect.Descriptor instead.
func (*Mistake) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{2}
}

func (x *Mistake) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

// 策展任务信息返回表
type RePublishTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaginationData   *PaginationData     `protobuf:"bytes,1,opt,name=paginationData,proto3" json:"paginationData,omitempty"`
	RePublishTaskBak []*RePublishTaskBak `protobuf:"bytes,2,rep,name=rePublishTaskBak,proto3" json:"rePublishTaskBak,omitempty"`
}

func (x *RePublishTask) Reset() {
	*x = RePublishTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RePublishTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RePublishTask) ProtoMessage() {}

func (x *RePublishTask) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RePublishTask.ProtoReflect.Descriptor instead.
func (*RePublishTask) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{3}
}

func (x *RePublishTask) GetPaginationData() *PaginationData {
	if x != nil {
		return x.PaginationData
	}
	return nil
}

func (x *RePublishTask) GetRePublishTaskBak() []*RePublishTaskBak {
	if x != nil {
		return x.RePublishTaskBak
	}
	return nil
}

// 策展任务信息返回表
type RePublishTaskBak struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId        uint64        `protobuf:"varint,1,opt,name=taskId,proto3" json:"taskId,omitempty"`              // ID
	CreatedAt     string        `protobuf:"bytes,2,opt,name=createdAt,proto3" json:"createdAt,omitempty"`         // 创建时间
	Creator       string        `protobuf:"bytes,3,opt,name=creator,proto3" json:"creator,omitempty"`             // 创建者ID
	CreatorName   string        `protobuf:"bytes,4,opt,name=creatorName,proto3" json:"creatorName,omitempty"`     // 创建者账户
	CreatorNick   string        `protobuf:"bytes,5,opt,name=creatorNick,proto3" json:"creatorNick,omitempty"`     // 创建者昵称
	CreatorAvatar string        `protobuf:"bytes,6,opt,name=creatorAvatar,proto3" json:"creatorAvatar,omitempty"` // 用户头像
	Status        int32         `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"`              // 任务状态，1-进行中,0-已结束
	TweetDetails  string        `protobuf:"bytes,8,opt,name=tweetDetails,proto3" json:"tweetDetails,omitempty"`   // 推特文章详情
	TweetPicture  string        `protobuf:"bytes,9,opt,name=tweetPicture,proto3" json:"tweetPicture,omitempty"`   // 推特文章图片
	Label         string        `protobuf:"bytes,10,opt,name=label,proto3" json:"label,omitempty"`                // 标签
	AwardBudget   float64       `protobuf:"fixed64,11,opt,name=awardBudget,proto3" json:"awardBudget,omitempty"`  // 奖励预算
	MaxUser       int64         `protobuf:"zigzag64,12,opt,name=maxUser,proto3" json:"maxUser,omitempty"`         // 最大奖励用户数
	AwardAmount   float64       `protobuf:"fixed64,13,opt,name=awardAmount,proto3" json:"awardAmount,omitempty"`  // 奖励金额
	EndTime       string        `protobuf:"bytes,14,opt,name=endTime,proto3" json:"endTime,omitempty"`            // 截止时间
	Accomplish    int64         `protobuf:"zigzag64,15,opt,name=accomplish,proto3" json:"accomplish,omitempty"`   // 已完成人数
	TaskDemand    []*TaskDemand `protobuf:"bytes,16,rep,name=taskDemand,proto3" json:"taskDemand,omitempty"`
}

func (x *RePublishTaskBak) Reset() {
	*x = RePublishTaskBak{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RePublishTaskBak) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RePublishTaskBak) ProtoMessage() {}

func (x *RePublishTaskBak) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RePublishTaskBak.ProtoReflect.Descriptor instead.
func (*RePublishTaskBak) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{4}
}

func (x *RePublishTaskBak) GetTaskId() uint64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *RePublishTaskBak) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *RePublishTaskBak) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *RePublishTaskBak) GetCreatorName() string {
	if x != nil {
		return x.CreatorName
	}
	return ""
}

func (x *RePublishTaskBak) GetCreatorNick() string {
	if x != nil {
		return x.CreatorNick
	}
	return ""
}

func (x *RePublishTaskBak) GetCreatorAvatar() string {
	if x != nil {
		return x.CreatorAvatar
	}
	return ""
}

func (x *RePublishTaskBak) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *RePublishTaskBak) GetTweetDetails() string {
	if x != nil {
		return x.TweetDetails
	}
	return ""
}

func (x *RePublishTaskBak) GetTweetPicture() string {
	if x != nil {
		return x.TweetPicture
	}
	return ""
}

func (x *RePublishTaskBak) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *RePublishTaskBak) GetAwardBudget() float64 {
	if x != nil {
		return x.AwardBudget
	}
	return 0
}

func (x *RePublishTaskBak) GetMaxUser() int64 {
	if x != nil {
		return x.MaxUser
	}
	return 0
}

func (x *RePublishTaskBak) GetAwardAmount() float64 {
	if x != nil {
		return x.AwardAmount
	}
	return 0
}

func (x *RePublishTaskBak) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *RePublishTaskBak) GetAccomplish() int64 {
	if x != nil {
		return x.Accomplish
	}
	return 0
}

func (x *RePublishTaskBak) GetTaskDemand() []*TaskDemand {
	if x != nil {
		return x.TaskDemand
	}
	return nil
}

type TaskDemand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId     uint64 `protobuf:"varint,1,opt,name=taskId,proto3" json:"taskId,omitempty"`        // 任务ID
	TaskName   int32  `protobuf:"varint,2,opt,name=taskName,proto3" json:"taskName,omitempty"`    // 任务名称,1-转推，2-引用，3-回复,4-喜欢,5-关注
	TaskDemand string `protobuf:"bytes,3,opt,name=taskDemand,proto3" json:"taskDemand,omitempty"` // 任务要求
	Article    string `protobuf:"bytes,4,opt,name=article,proto3" json:"article,omitempty"`       // 任务文案
}

func (x *TaskDemand) Reset() {
	*x = TaskDemand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskDemand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskDemand) ProtoMessage() {}

func (x *TaskDemand) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskDemand.ProtoReflect.Descriptor instead.
func (*TaskDemand) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{5}
}

func (x *TaskDemand) GetTaskId() uint64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *TaskDemand) GetTaskName() int32 {
	if x != nil {
		return x.TaskName
	}
	return 0
}

func (x *TaskDemand) GetTaskDemand() string {
	if x != nil {
		return x.TaskDemand
	}
	return ""
}

func (x *TaskDemand) GetArticle() string {
	if x != nil {
		return x.Article
	}
	return ""
}

// 查询策展任务输入
type PublishTaskInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`     // 筛选，0-已结束，1-进行中
	CurrPage int32 `protobuf:"varint,2,opt,name=currPage,proto3" json:"currPage,omitempty"` // 当前页面
	MaxNum   int32 `protobuf:"varint,3,opt,name=maxNum,proto3" json:"maxNum,omitempty"`     // 最大输出数
}

func (x *PublishTaskInput) Reset() {
	*x = PublishTaskInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishTaskInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishTaskInput) ProtoMessage() {}

func (x *PublishTaskInput) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishTaskInput.ProtoReflect.Descriptor instead.
func (*PublishTaskInput) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{6}
}

func (x *PublishTaskInput) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *PublishTaskInput) GetCurrPage() int32 {
	if x != nil {
		return x.CurrPage
	}
	return 0
}

func (x *PublishTaskInput) GetMaxNum() int32 {
	if x != nil {
		return x.MaxNum
	}
	return 0
}

// 任务详情
type ReTaskDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RePublishTaskSrt *RePublishTaskBak `protobuf:"bytes,1,opt,name=rePublishTaskSrt,proto3" json:"rePublishTaskSrt,omitempty"` // 策展任务信息
	Participant      []*ParticipantBak `protobuf:"bytes,2,rep,name=Participant,proto3" json:"Participant,omitempty"`           // 策展任务参与者列表
	TaskDemandBak    []*TaskDemandBak  `protobuf:"bytes,3,rep,name=TaskDemandBak,proto3" json:"TaskDemandBak,omitempty"`       // 任务要求
}

func (x *ReTaskDetails) Reset() {
	*x = ReTaskDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReTaskDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReTaskDetails) ProtoMessage() {}

func (x *ReTaskDetails) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReTaskDetails.ProtoReflect.Descriptor instead.
func (*ReTaskDetails) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{7}
}

func (x *ReTaskDetails) GetRePublishTaskSrt() *RePublishTaskBak {
	if x != nil {
		return x.RePublishTaskSrt
	}
	return nil
}

func (x *ReTaskDetails) GetParticipant() []*ParticipantBak {
	if x != nil {
		return x.Participant
	}
	return nil
}

func (x *ReTaskDetails) GetTaskDemandBak() []*TaskDemandBak {
	if x != nil {
		return x.TaskDemandBak
	}
	return nil
}

type TaskDemandBak struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID     uint64 `protobuf:"varint,1,opt,name=taskID,proto3" json:"taskID,omitempty"`        // 任务ID
	TaskName   int64  `protobuf:"varint,2,opt,name=taskName,proto3" json:"taskName,omitempty"`    // 任务名称,1-转推，2-引用，3-回复,4-喜欢,5-关注
	TaskDemand string `protobuf:"bytes,3,opt,name=taskDemand,proto3" json:"taskDemand,omitempty"` // 任务要求
	Article    string `protobuf:"bytes,4,opt,name=article,proto3" json:"article,omitempty"`       // 任务文案
	Done       int32  `protobuf:"varint,5,opt,name=done,proto3" json:"done,omitempty"`            // 是否完成，1-已完成，0-未完成
}

func (x *TaskDemandBak) Reset() {
	*x = TaskDemandBak{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskDemandBak) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskDemandBak) ProtoMessage() {}

func (x *TaskDemandBak) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskDemandBak.ProtoReflect.Descriptor instead.
func (*TaskDemandBak) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{8}
}

func (x *TaskDemandBak) GetTaskID() uint64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *TaskDemandBak) GetTaskName() int64 {
	if x != nil {
		return x.TaskName
	}
	return 0
}

func (x *TaskDemandBak) GetTaskDemand() string {
	if x != nil {
		return x.TaskDemand
	}
	return ""
}

func (x *TaskDemandBak) GetArticle() string {
	if x != nil {
		return x.Article
	}
	return ""
}

func (x *TaskDemandBak) GetDone() int32 {
	if x != nil {
		return x.Done
	}
	return 0
}

type ParticipantBak struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      string  `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`             // 用户ID
	UserName    string  `protobuf:"bytes,2,opt,name=userName,proto3" json:"userName,omitempty"`         // 用户账户
	NickName    string  `protobuf:"bytes,3,opt,name=nickName,proto3" json:"nickName,omitempty"`         // 用户昵称
	Avatar      string  `protobuf:"bytes,4,opt,name=avatar,proto3" json:"avatar,omitempty"`             // 照片地址
	AwardAmount float64 `protobuf:"fixed64,5,opt,name=awardAmount,proto3" json:"awardAmount,omitempty"` // 奖励金额
	TaskID      uint64  `protobuf:"varint,6,opt,name=taskID,proto3" json:"taskID,omitempty"`            // 任务ID
	Status      int32   `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"`            // 任务状态，1-进行中，0-已结束
}

func (x *ParticipantBak) Reset() {
	*x = ParticipantBak{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParticipantBak) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipantBak) ProtoMessage() {}

func (x *ParticipantBak) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipantBak.ProtoReflect.Descriptor instead.
func (*ParticipantBak) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{9}
}

func (x *ParticipantBak) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ParticipantBak) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *ParticipantBak) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *ParticipantBak) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *ParticipantBak) GetAwardAmount() float64 {
	if x != nil {
		return x.AwardAmount
	}
	return 0
}

func (x *ParticipantBak) GetTaskID() uint64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *ParticipantBak) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

// 分页数据格式
type PaginationData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total   int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`                    // 数据总量
	Page    int32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`                      // 当前页码
	PerPage int32 `protobuf:"varint,3,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"` // 约束的最大数据量
}

func (x *PaginationData) Reset() {
	*x = PaginationData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaginationData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaginationData) ProtoMessage() {}

func (x *PaginationData) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaginationData.ProtoReflect.Descriptor instead.
func (*PaginationData) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{10}
}

func (x *PaginationData) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *PaginationData) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *PaginationData) GetPerPage() int32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

// 查询任务详情入参
type TaskDetailsInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId uint64 `protobuf:"varint,1,opt,name=taskId,proto3" json:"taskId,omitempty"` // 任务ID
	UserId string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`  //  用户ID
}

func (x *TaskDetailsInput) Reset() {
	*x = TaskDetailsInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskDetailsInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskDetailsInput) ProtoMessage() {}

func (x *TaskDetailsInput) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskDetailsInput.ProtoReflect.Descriptor instead.
func (*TaskDetailsInput) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{11}
}

func (x *TaskDetailsInput) GetTaskId() uint64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *TaskDetailsInput) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// 查询个人发起任务列表+参与任务入参
type UserLaunchTaskListInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`      //  用户ID
	CurrPage int32  `protobuf:"varint,2,opt,name=currPage,proto3" json:"currPage,omitempty"` //  当前页面
	MaxNum   int32  `protobuf:"varint,3,opt,name=maxNum,proto3" json:"maxNum,omitempty"`     // 最大输出数
	Status   int32  `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`     // 查询状态，1-个人发起任务列表，2-个人参与任务列表
}

func (x *UserLaunchTaskListInput) Reset() {
	*x = UserLaunchTaskListInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserLaunchTaskListInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLaunchTaskListInput) ProtoMessage() {}

func (x *UserLaunchTaskListInput) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLaunchTaskListInput.ProtoReflect.Descriptor instead.
func (*UserLaunchTaskListInput) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{12}
}

func (x *UserLaunchTaskListInput) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserLaunchTaskListInput) GetCurrPage() int32 {
	if x != nil {
		return x.CurrPage
	}
	return 0
}

func (x *UserLaunchTaskListInput) GetMaxNum() int32 {
	if x != nil {
		return x.MaxNum
	}
	return 0
}

func (x *UserLaunchTaskListInput) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

// 创建标签入参
type CreateLabelInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"` // 用户ID
	Label  string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`   // 标签信息
}

func (x *CreateLabelInput) Reset() {
	*x = CreateLabelInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateLabelInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLabelInput) ProtoMessage() {}

func (x *CreateLabelInput) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLabelInput.ProtoReflect.Descriptor instead.
func (*CreateLabelInput) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{13}
}

func (x *CreateLabelInput) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateLabelInput) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

// 删除标签入参
type DeleteLabelInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // 标签ID
}

func (x *DeleteLabelInput) Reset() {
	*x = DeleteLabelInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteLabelInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLabelInput) ProtoMessage() {}

func (x *DeleteLabelInput) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLabelInput.ProtoReflect.Descriptor instead.
func (*DeleteLabelInput) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{14}
}

func (x *DeleteLabelInput) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 获取标签列表入参
type LabelListInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"` // 用戶ID
}

func (x *LabelListInput) Reset() {
	*x = LabelListInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabelListInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelListInput) ProtoMessage() {}

func (x *LabelListInput) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelListInput.ProtoReflect.Descriptor instead.
func (*LabelListInput) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{15}
}

func (x *LabelListInput) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// 获取标签列表出参
type ReLabelList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID      uint64 `protobuf:"varint,1,opt,name=iD,proto3" json:"iD,omitempty"`
	Creator string `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"` // 创建者
	Content string `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"` // 内容
}

func (x *ReLabelList) Reset() {
	*x = ReLabelList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReLabelList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReLabelList) ProtoMessage() {}

func (x *ReLabelList) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReLabelList.ProtoReflect.Descriptor instead.
func (*ReLabelList) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{16}
}

func (x *ReLabelList) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ReLabelList) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *ReLabelList) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

var File_task_proto protoreflect.FileDescriptor

var file_task_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x74, 0x61,
	0x73, 0x6b, 0x22, 0xf3, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x77, 0x65, 0x65, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74,
	0x77, 0x65, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x77, 0x61, 0x72, 0x64, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x61, 0x77, 0x61, 0x72, 0x64, 0x42, 0x75, 0x64,
	0x67, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x55, 0x73, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x12, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x55, 0x73, 0x65, 0x72, 0x12, 0x20, 0x0a,
	0x0b, 0x61, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0b, 0x61, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x27, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x42, 0x61, 0x6b, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x42, 0x61, 0x6b, 0x52,
	0x07, 0x74, 0x61, 0x73, 0x6b, 0x42, 0x61, 0x6b, 0x22, 0x77, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b,
	0x42, 0x61, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74,
	0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x74,
	0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x44,
	0x65, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x61, 0x73,
	0x6b, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x22, 0x1b, 0x0a, 0x07, 0x4d, 0x69, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x65, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x72, 0x72, 0x22, 0x91,
	0x01, 0x0a, 0x0d, 0x52, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x54, 0x61, 0x73, 0x6b,
	0x12, 0x3c, 0x0a, 0x0e, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0e,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x42,
	0x0a, 0x10, 0x72, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x42,
	0x61, 0x6b, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e,
	0x52, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x61, 0x6b,
	0x52, 0x10, 0x72, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x42,
	0x61, 0x6b, 0x22, 0x8c, 0x04, 0x0a, 0x10, 0x52, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x54, 0x61, 0x73, 0x6b, 0x42, 0x61, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x12, 0x24, 0x0a, 0x0d, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x77, 0x65,
	0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x74, 0x77, 0x65, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x22, 0x0a,
	0x0c, 0x74, 0x77, 0x65, 0x65, 0x74, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x77, 0x65, 0x65, 0x74, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x77, 0x61, 0x72, 0x64,
	0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x61, 0x77,
	0x61, 0x72, 0x64, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x78,
	0x55, 0x73, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x12, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x61, 0x77, 0x61, 0x72, 0x64, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x73, 0x68, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x12, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x73, 0x68, 0x12,
	0x30, 0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x10, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x44,
	0x65, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x6d, 0x61, 0x6e,
	0x64, 0x22, 0x7a, 0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x6d, 0x61, 0x6e,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x6d,
	0x61, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x22, 0x5e, 0x0a,
	0x10, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72,
	0x72, 0x50, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x75, 0x72,
	0x72, 0x50, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x22, 0xc6, 0x01,
	0x0a, 0x0d, 0x52, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x42, 0x0a, 0x10, 0x72, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x54, 0x61, 0x73, 0x6b,
	0x53, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x61, 0x73, 0x6b,
	0x2e, 0x52, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x61,
	0x6b, 0x52, 0x10, 0x72, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x54, 0x61, 0x73, 0x6b,
	0x53, 0x72, 0x74, 0x12, 0x36, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x6b, 0x52, 0x0b,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x0d, 0x54,
	0x61, 0x73, 0x6b, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x42, 0x61, 0x6b, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65,
	0x6d, 0x61, 0x6e, 0x64, 0x42, 0x61, 0x6b, 0x52, 0x0d, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x6d,
	0x61, 0x6e, 0x64, 0x42, 0x61, 0x6b, 0x22, 0x91, 0x01, 0x0a, 0x0d, 0x54, 0x61, 0x73, 0x6b, 0x44,
	0x65, 0x6d, 0x61, 0x6e, 0x64, 0x42, 0x61, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x74, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x22, 0xca, 0x01, 0x0a, 0x0e, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x6b, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x61, 0x77, 0x61, 0x72,
	0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49,
	0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x55, 0x0a, 0x0e, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x22, 0x42,
	0x0a, 0x10, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x7d, 0x0a, 0x17, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68,
	0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x50, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x50, 0x61, 0x67,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x40, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x22, 0x22, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x28, 0x0a, 0x0e, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x51, 0x0a, 0x0b, 0x52, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x44,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x32, 0xc0, 0x03, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x43, 0x0a,
	0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x75, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x69, 0x61,
	0x6c, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x1c, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x1a, 0x0d, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x4d, 0x69, 0x73, 0x74, 0x61,
	0x6b, 0x65, 0x12, 0x3c, 0x0a, 0x0d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x13, 0x2e, 0x74, 0x61,
	0x73, 0x6b, 0x2e, 0x52, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x54, 0x61, 0x73, 0x6b,
	0x12, 0x3f, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x16, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x13, 0x2e, 0x74,
	0x61, 0x73, 0x6b, 0x2e, 0x52, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x4d, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x61,
	0x75, 0x6e, 0x63, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x2e, 0x74,
	0x61, 0x73, 0x6b, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x54, 0x61,
	0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x13, 0x2e, 0x74, 0x61,
	0x73, 0x6b, 0x2e, 0x52, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x54, 0x61, 0x73, 0x6b,
	0x12, 0x34, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12,
	0x16, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x0d, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x4d,
	0x69, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x16, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x0d, 0x2e,
	0x74, 0x61, 0x73, 0x6b, 0x2e, 0x4d, 0x69, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x39, 0x0a, 0x0e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14,
	0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x1a, 0x11, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x52, 0x65, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x08, 0x5a, 0x06, 0x2e, 0x2f, 0x74, 0x61, 0x73,
	0x6b, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_task_proto_rawDescOnce sync.Once
	file_task_proto_rawDescData = file_task_proto_rawDesc
)

func file_task_proto_rawDescGZIP() []byte {
	file_task_proto_rawDescOnce.Do(func() {
		file_task_proto_rawDescData = protoimpl.X.CompressGZIP(file_task_proto_rawDescData)
	})
	return file_task_proto_rawDescData
}

var file_task_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_task_proto_goTypes = []interface{}{
	(*CreatePublishTaskInput)(nil),  // 0: task.CreatePublishTaskInput
	(*TaskBak)(nil),                 // 1: task.taskBak
	(*Mistake)(nil),                 // 2: task.Mistake
	(*RePublishTask)(nil),           // 3: task.RePublishTask
	(*RePublishTaskBak)(nil),        // 4: task.RePublishTaskBak
	(*TaskDemand)(nil),              // 5: task.taskDemand
	(*PublishTaskInput)(nil),        // 6: task.PublishTaskInput
	(*ReTaskDetails)(nil),           // 7: task.ReTaskDetails
	(*TaskDemandBak)(nil),           // 8: task.TaskDemandBak
	(*ParticipantBak)(nil),          // 9: task.ParticipantBak
	(*PaginationData)(nil),          // 10: task.PaginationData
	(*TaskDetailsInput)(nil),        // 11: task.TaskDetailsInput
	(*UserLaunchTaskListInput)(nil), // 12: task.UserLaunchTaskListInput
	(*CreateLabelInput)(nil),        // 13: task.CreateLabelInput
	(*DeleteLabelInput)(nil),        // 14: task.DeleteLabelInput
	(*LabelListInput)(nil),          // 15: task.LabelListInput
	(*ReLabelList)(nil),             // 16: task.ReLabelList
}
var file_task_proto_depIdxs = []int32{
	1,  // 0: task.CreatePublishTaskInput.taskBak:type_name -> task.taskBak
	10, // 1: task.RePublishTask.paginationData:type_name -> task.PaginationData
	4,  // 2: task.RePublishTask.rePublishTaskBak:type_name -> task.RePublishTaskBak
	5,  // 3: task.RePublishTaskBak.taskDemand:type_name -> task.taskDemand
	4,  // 4: task.ReTaskDetails.rePublishTaskSrt:type_name -> task.RePublishTaskBak
	9,  // 5: task.ReTaskDetails.Participant:type_name -> task.ParticipantBak
	8,  // 6: task.ReTaskDetails.TaskDemandBak:type_name -> task.TaskDemandBak
	0,  // 7: task.Task.CreateCuratorialTask:input_type -> task.CreatePublishTaskInput
	6,  // 8: task.Task.QueryTaskList:input_type -> task.PublishTaskInput
	11, // 9: task.Task.QueryTaskDetails:input_type -> task.TaskDetailsInput
	12, // 10: task.Task.QueryUserLaunchTaskList:input_type -> task.UserLaunchTaskListInput
	13, // 11: task.Task.CreateLabel:input_type -> task.CreateLabelInput
	14, // 12: task.Task.DeleteLabel:input_type -> task.DeleteLabelInput
	15, // 13: task.Task.QueryLabelList:input_type -> task.LabelListInput
	2,  // 14: task.Task.CreateCuratorialTask:output_type -> task.Mistake
	3,  // 15: task.Task.QueryTaskList:output_type -> task.RePublishTask
	7,  // 16: task.Task.QueryTaskDetails:output_type -> task.ReTaskDetails
	3,  // 17: task.Task.QueryUserLaunchTaskList:output_type -> task.RePublishTask
	2,  // 18: task.Task.CreateLabel:output_type -> task.Mistake
	2,  // 19: task.Task.DeleteLabel:output_type -> task.Mistake
	16, // 20: task.Task.QueryLabelList:output_type -> task.ReLabelList
	14, // [14:21] is the sub-list for method output_type
	7,  // [7:14] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_task_proto_init() }
func file_task_proto_init() {
	if File_task_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_task_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePublishTaskInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskBak); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Mistake); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RePublishTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RePublishTaskBak); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskDemand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishTaskInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReTaskDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskDemandBak); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParticipantBak); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaginationData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskDetailsInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserLaunchTaskListInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateLabelInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteLabelInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabelListInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReLabelList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_task_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_task_proto_goTypes,
		DependencyIndexes: file_task_proto_depIdxs,
		MessageInfos:      file_task_proto_msgTypes,
	}.Build()
	File_task_proto = out.File
	file_task_proto_rawDesc = nil
	file_task_proto_goTypes = nil
	file_task_proto_depIdxs = nil
}
