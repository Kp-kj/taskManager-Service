// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	participantFieldNames          = builder.RawFieldNames(&Participant{})
	participantRows                = strings.Join(participantFieldNames, ",")
	participantRowsExpectAutoSet   = strings.Join(stringx.Remove(participantFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	participantRowsWithPlaceHolder = strings.Join(stringx.Remove(participantFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	participantModel interface {
		Insert(ctx context.Context, data *Participant) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Participant, error)
		Update(ctx context.Context, data *Participant) error
		Delete(ctx context.Context, id int64) error
		FinParticipantList(ctx context.Context,tashkId uint64) ([]*Participant, error)
		FindParticipantAmount(ctx context.Context, status interface{},genre string) (int64, error)
		FindParticipantList(ctx context.Context, tashkId,maxNum,startLine int64,genre string) ([]*Participant, error)
		GetListIndividualParticipating(ctx context.Context, userId string,maxNum,startLine int64) ([]*Participant, error)
		UpdateParticipant(ctx context.Context, userId string,taskId uint64) error
		FindTaskParticipant(ctx context.Context, userId string,taskId int64) ([]*Participant, error)
		FindListParticipants(ctx context.Context, userId string,taskId int64) (*Participant, error)
	}

	defaultParticipantModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Participant struct {
		Id          int64          `db:"id"`
		CreatedAt   sql.NullTime   `db:"created_at"`
		UpdatedAt   sql.NullTime   `db:"updated_at"`
		DeletedAt   sql.NullTime   `db:"deleted_at"`
		UserId      string         `db:"user_id"`
		UserName    string         `db:"user_name"`
		NickName    sql.NullString `db:"nick_name"`
		Avatar      sql.NullString `db:"avatar"`
		AwardAmount float64        `db:"award_amount"`
		TaskId      int64          `db:"task_id"`
		Status      int64          `db:"status"`
	}
)

func newParticipantModel(conn sqlx.SqlConn) *defaultParticipantModel {
	return &defaultParticipantModel{
		conn:  conn,
		table: "`participant`",
	}
}

func (m *defaultParticipantModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultParticipantModel) FindOne(ctx context.Context, id int64) (*Participant, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", participantRows, m.table)
	var resp Participant
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultParticipantModel) Insert(ctx context.Context, data *Participant) (sql.Result, error) {
	participant:=fmt.Sprintf("created_at, user_id, user_name, nick_name, avatar, award_amount, task_id, status")
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, participant)
	ret, err := m.conn.ExecCtx(ctx, query, data.CreatedAt, data.UserId, data.UserName, data.NickName, data.Avatar, data.AwardAmount, data.TaskId, data.Status)
	return ret, err
}

func (m *defaultParticipantModel) Update(ctx context.Context, data *Participant) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, participantRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.DeletedAt, data.UserId, data.UserName, data.NickName, data.Avatar, data.AwardAmount, data.TaskId, data.Status, data.Id)
	return err
}

func (m *defaultParticipantModel) tableName() string {
	return m.table
}

// FinParticipantList 获取任务列表
func (m *defaultParticipantModel) FinParticipantList(ctx context.Context, tashkId uint64) ([]*Participant, error) {
	query := fmt.Sprintf( "select %s from %s where `task_id` = ?", participantRows, m.table)
	var resp []*Participant
	err := m.conn.QueryRow(&resp, query, tashkId)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

// FinParticipantAmount 获取任务数量
func (m *defaultParticipantModel) FindParticipantAmount(ctx context.Context, status interface{},genre string) (int64, error) {
	query := fmt.Sprintf("SELECT COUNT(*) FROM %s WHERE `%s` = ?", m.table,genre)
	var resp int64
	err := m.conn.QueryRow(&resp, query, status)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return 0, ErrNotFound
	default:
		return 0, err
	}
}

// FindTaskList 按条件查询策展任务
func (m *defaultParticipantModel) FindParticipantList(ctx context.Context, tashkId,maxNum,startLine int64,genre string) ([]*Participant, error) {
	query := fmt.Sprintf("select %s from %s where `%s` = ? ORDER BY id DESC limit %d offset %d", participantRows, m.table, genre, maxNum, startLine)
	var resp []*Participant
	err := m.conn.QueryRows(&resp, query, tashkId)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

// GetListIndividualParticipating 获取个人参与任务ID列表
func (m *defaultParticipantModel) GetListIndividualParticipating(ctx context.Context, userId string, maxNum,startLine int64) ([]*Participant, error) {
	query := fmt.Sprintf( "select %s from %s where `user_id` = ? ORDER BY id DESC limit %d offset %d", participantRows, m.table, maxNum, startLine)
	var resp []*Participant
	err := m.conn.QueryRows( &resp, query, userId)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultParticipantModel) UpdateParticipant(ctx context.Context, userId string,taskId uint64) error {
	query := fmt.Sprintf("update %s set `status` = 0 where `user_id` = ? and `task_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, userId,taskId)
	return err
}

// FindTaskParticipant 任务参与者
func (m *defaultParticipantModel) FindTaskParticipant(ctx context.Context, userId string,taskId int64) ([]*Participant, error) {
	query := fmt.Sprintf("select %s from %s where `user_id` = ? AND `task_id` = ? AND `created_at` like ? ORDER BY id DESC", participantRows, m.table)
	var resp []*Participant
	err := m.conn.QueryRowsCtx(ctx,&resp, query, userId,taskId,time.Now().Format("2006-01-02")+"%")
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
// FindListParticipants 任务参与者
func (m *defaultParticipantModel) FindListParticipants(ctx context.Context, userId string,taskId int64) (*Participant, error) {
	query := fmt.Sprintf("select %s from %s where `user_id` = ? AND `task_id` = ? ORDER BY id DESC", participantRows, m.table)
	var resp Participant
	err := m.conn.QueryRow(&resp, query, userId,taskId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}