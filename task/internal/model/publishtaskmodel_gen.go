// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	publishTaskFieldNames          = builder.RawFieldNames(&PublishTask{})
	publishTaskRows                = strings.Join(publishTaskFieldNames, ",")
	publishTaskRowsExpectAutoSet   = strings.Join(stringx.Remove(publishTaskFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	publishTaskRowsWithPlaceHolder = strings.Join(stringx.Remove(publishTaskFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	publishTaskModel interface {
		Insert(ctx context.Context, data *PublishTask) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*PublishTask, error)
		Update(ctx context.Context, data *PublishTask) error
		Delete(ctx context.Context, id int64) error
		FindPublishTaskAmount(ctx context.Context, status interface{},genre string) (int64, error)
		FindPublishTaskList(ctx context.Context, tashkId interface{},maxNum,startLine int64,genre string) ([]*PublishTask, error)
		FindTaskInformationBasedID(ctx context.Context, tashkId string) ([]*PublishTask, error)
		UpdateNumberCompleters(ctx context.Context, data uint64) error
		FindTaskCount(ctx context.Context, userId string) (int64, error)
		FindNewlyAddedData(ctx context.Context, creator,tweetAddress,label string) (*PublishTask, error)
	}

	defaultPublishTaskModel struct {
		conn  sqlx.SqlConn
		table string
	}

	PublishTask struct {
		Id           int64        `db:"id"`
		CreatedAt    sql.NullTime `db:"created_at"`
		UpdatedAt    sql.NullTime `db:"updated_at"`
		DeletedAt    sql.NullTime `db:"deleted_at"`
		Creator      string       `db:"creator"`
		Status       int64        `db:"status"`
		TweetAddress string       `db:"tweet_address"`
		Label        string       `db:"label"`
		AwardBudget  float64      `db:"award_budget"`
		MaxUser      int64        `db:"max_user"`
		AwardAmount  float64      `db:"award_amount"`
		EndTime      time.Time    `db:"end_time"`
		Accomplish   int64        `db:"accomplish"`
	}
)

func newPublishTaskModel(conn sqlx.SqlConn) *defaultPublishTaskModel {
	return &defaultPublishTaskModel{
		conn:  conn,
		table: "`publish_task`",
	}
}

func (m *defaultPublishTaskModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultPublishTaskModel) FindOne(ctx context.Context, id int64) (*PublishTask, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", publishTaskRows, m.table)
	var resp PublishTask
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPublishTaskModel) Insert(ctx context.Context, data *PublishTask) (sql.Result, error) {
	publish:= "`created_at`, `creator`, `status`, `tweet_address`, `label`, `award_budget`, `max_user`, `award_amount`, `end_time`, `accomplish`"
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, publish)
	ret, err := m.conn.ExecCtx(ctx, query, data.CreatedAt, data.Creator, data.Status, data.TweetAddress, data.Label, data.AwardBudget, data.MaxUser, data.AwardAmount, data.EndTime, data.Accomplish)
	return ret, err
}

func (m *defaultPublishTaskModel) Update(ctx context.Context, data *PublishTask) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, publishTaskRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.DeletedAt, data.Creator, data.Status, data.TweetAddress, data.Label, data.AwardBudget, data.MaxUser, data.AwardAmount, data.EndTime, data.Accomplish, data.Id)
	return err
}

func (m *defaultPublishTaskModel) tableName() string {
	return m.table
}

// FinParticipantAmount 获取任务数量
func (m *defaultPublishTaskModel) FindPublishTaskAmount(ctx context.Context, status interface{},genre string) (int64, error) {
	query := fmt.Sprintf("SELECT COUNT(*) FROM %s WHERE `%s` = ?", m.table,genre)
	var resp int64
	err := m.conn.QueryRow(&resp, query, status)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return 0, ErrNotFound
	default:
		return 0, err
	}
}

// FindTaskList 按条件查询策展任务
func (m *defaultPublishTaskModel) FindPublishTaskList(ctx context.Context, tashkId  interface{},   maxNum,startLine int64,genre string) ([]*PublishTask, error) {
	query := fmt.Sprintf("select %s from %s where `%s` = ? limit %d offset %d", publishTaskRows, m.table, genre, maxNum, startLine)
	var resp []*PublishTask
	err := m.conn.QueryRows(&resp, query, tashkId)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

// 根据ID获取任务信息
func (m *defaultPublishTaskModel) FindTaskInformationBasedID(ctx context.Context, info string) ([]*PublishTask, error) {
	query := fmt.Sprintf("select %s from %s where `id` in %v", publishTaskRows, m.table, info)
	var resp []*PublishTask
	err := m.conn.QueryRows(&resp, query)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

// FindTaskCount 查询今日是否发布策展任务数量
func (m *defaultPublishTaskModel) FindTaskCount(ctx context.Context, userId string) (int64, error) {
	query := fmt.Sprintf("select COUNT(*) from %s where `creator` = ? AND `created_at` like ?", m.table)
	var resp int64
	err := m.conn.QueryRow(&resp, query, userId,time.Now().Format("2006-01-02")+"%")
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return 0, ErrNotFound
	default:
		return 0, err
	}
}
func (m *defaultPublishTaskModel) UpdateNumberCompleters(ctx context.Context, data uint64) error {
	query := fmt.Sprintf("update %s set `accomplish` = accomplish + 1 where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query,data)
	return err
}
// 查询刚刚添加的数据
func (m *defaultPublishTaskModel) FindNewlyAddedData(ctx context.Context, creator,tweetAddress,label string) (*PublishTask, error) {
	query := fmt.Sprintf("select %s from %s where `creator` = ? AND `tweet_address` = ? AND `label` = ? order by id DESC limit 1", publishTaskRows, m.table)
	var resp PublishTask
	err := m.conn.QueryRowCtx(ctx, &resp, query, creator,tweetAddress,label)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
