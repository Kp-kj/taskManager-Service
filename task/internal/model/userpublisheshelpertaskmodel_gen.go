// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userPublishesHelperTaskFieldNames          = builder.RawFieldNames(&UserPublishesHelperTask{})
	userPublishesHelperTaskRows                = strings.Join(userPublishesHelperTaskFieldNames, ",")
	userPublishesHelperTaskRowsExpectAutoSet   = strings.Join(stringx.Remove(userPublishesHelperTaskFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userPublishesHelperTaskRowsWithPlaceHolder = strings.Join(stringx.Remove(userPublishesHelperTaskFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	userPublishesHelperTaskModel interface {
		Insert(ctx context.Context, data *UserPublishesHelperTask) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UserPublishesHelperTask, error)
		Update(ctx context.Context, data *UserPublishesHelperTask) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUserPublishesHelperTaskModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UserPublishesHelperTask struct {
		Id        int64          `db:"id"`
		CreatedAt sql.NullTime   `db:"created_at"`
		UpdatedAt sql.NullTime   `db:"updated_at"`
		DeletedAt sql.NullTime   `db:"deleted_at"`
		UserId    string         `db:"user_id"`
		UserName  sql.NullString `db:"user_name"`
		Avatar    sql.NullString `db:"avatar"`
		Article   sql.NullString `db:"article"`
		Link      sql.NullString `db:"link"`
		Label     sql.NullString `db:"label"`
	}
)

func newUserPublishesHelperTaskModel(conn sqlx.SqlConn) *defaultUserPublishesHelperTaskModel {
	return &defaultUserPublishesHelperTaskModel{
		conn:  conn,
		table: "`user_publishes_helper_task`",
	}
}

func (m *defaultUserPublishesHelperTaskModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUserPublishesHelperTaskModel) FindOne(ctx context.Context, id int64) (*UserPublishesHelperTask, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userPublishesHelperTaskRows, m.table)
	var resp UserPublishesHelperTask
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserPublishesHelperTaskModel) Insert(ctx context.Context, data *UserPublishesHelperTask) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, userPublishesHelperTaskRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.DeletedAt, data.UserId, data.UserName, data.Avatar, data.Article, data.Link, data.Label)
	return ret, err
}

func (m *defaultUserPublishesHelperTaskModel) Update(ctx context.Context, data *UserPublishesHelperTask) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userPublishesHelperTaskRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.DeletedAt, data.UserId, data.UserName, data.Avatar, data.Article, data.Link, data.Label, data.Id)
	return err
}

func (m *defaultUserPublishesHelperTaskModel) tableName() string {
	return m.table
}
